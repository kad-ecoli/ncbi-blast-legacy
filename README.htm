<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#0000EE" vlink="#551A8B" alink="#FF0000">

<center><b><font color="#3366FF"><font size=+2>NCBI SOFTWARE DEVELOPMENT
TOOLKIT</font></font></b>
<br><b><font color="#3366FF"><font size=+2>National Center for Biotechnology
Information</font></font></b>
<br><b><font color="#3366FF"><font size=+2>Bldg 38A, NIH</font></font></b>
<br><b><font color="#3366FF"><font size=+2>8600 Rockville Pike</font></font></b>
<br><b><font color="#3366FF"><font size=+2>Bethesda, MD 20894</font></font></b></center>

<p>The NCBI Software Development Toolkit was developed for the production
and distribution of GenBank, Entrez, BLAST, and related services by NCBI.
We make it freely available to the public without restriction to facilitate
the use of NCBI by the scientific community. However, please understand
that while we feel we have done a high quality job, this is not commercial
software. The documentation lags considerably behind the software and we
must make any changes required by our data production needs. Nontheless,
many people have found it a useful and stable basis for a number of tools
and applications.
<p>The toolkit is available by anonymous ftp from <a href="ftp://ftp.ncbi.nih.gov/toolbox/ncbi_tools/">ftp.ncbi.nih.gov</a>
<blockquote><tt>cd toolbox</tt>
<br><tt>cd ncbi_tools</tt>
<br><tt>bin</tt>
<br><tt>get ncbi.tar.Z&nbsp; (compressed UNIX tar file)</tt>
<br><tt>quit</tt></blockquote>

<p><br>In this same directory are also ncbiz.exe (DOS self extracting archive)
and ncbi.hqx (Mac self extracting archive). All three files contain the
same source code and will make the toolkit for all platforms.
<p>Please feel free to email questions/suggestions to: <a href="mailto:toolbox@ncbi.nlm.nih.gov">toolbox@ncbi.nlm.nih.gov</a>
<p>If you would like hardcopy of the current documentation, send your mailing
address with your request to the email address above.
<p>If you are considering a serious development project using this toolkit,
please contact us. We are happy to discuss compatible strategies and inform
you of our longer term plans. There is no limitation of the use of this
code or in contacting us about its use for commercial, academic, or government
groups.
<br>
<hr WIDTH="100%">
<center><b><font size=+1>Version 6.1</font></b>
<br><i>&nbsp; the date of release may be obtained from the file <b>ncbi/VERSION</b></i></center>

<hr WIDTH="100%">
<center><b>Summary</b></center>

<p>The procedure of building the toolkit on Unix was slightly changed.
Now there is no need to download any binary NCBI product for your platform
to obtain the platform-specific ncbi.mk file.
<p>To build the NCBI toolkit you need to look for platform-dependent instructions:
<br>For UNIX (including Linux and Mac OS X):
<br>&nbsp; look at the file <b>make/readme.unx</b>
<br>For alternative Mac instructions (using CodeWarrior):
<br>&nbsp; look at the file <b>make/readme.mac</b>
<br>For Microsoft Windows95/98/NT:
<br>&nbsp; look at the file <b>make/readme.dos</b>
<br>There is some information which may be useful for NCBI tookit building
in the file <b>doc/FAQ.txt</b>
<p>Documentation relevant to BLAST may be found in the <b>doc/blast</b> subdirectory.
<p>The file <b>doc/sequin.htm</b> describes SEQUIN and its configuration.
<p>If you have problems configuring Entrez with a firewall, look at the
file <b>doc/firewall.txt</b>
<p>This file has a section called <b>CONFIGURATION OR SETTINGS FILES,</b>
which explains in detail how our configuration system works. The ncbi config
file (<b>.ncbirc </b>on UNIX, <b>ncbi.ini </b>on PC/Windows, and <b>ncbi.cnf
</b>on
Macintosh) is needed in order to find data files, such as <b>gc.val
</b>(the
genetic code table), provided in the toolkit or with programs like Sequin.&nbsp;
(The <b>asnload</b> files containing dynamic versions of the ASN.1 parse
tables are no longer needed, since all platforms can now have large static
data.)
<p>It has recently become possible to eliminate the need for the ncbi config
file by calling <b>UseLocalAsnloadDataAndErrMsg ()</b> at the beginning
of your program.&nbsp; This looks for the data directory in the same directory
as the running program.&nbsp; If it doesn't find it, it looks up one level,
in case you are compiling programs in the build directory of the toolkit.
If it finds the data directory in either of these places, it transiently
sets the location, so code that loads these files is given the correct
path.
<p>An even more recent change is that copies of several of our data files
(gc, seqcode, and featdef) are now built into the source code, so if the
data directory is not found, programs that require only these can still
run.
<p>One final improvement is that access to our network services is now
much simpler than before, so if you are not behind a firewall and have
domain name server (DNS) available you can connect to our network without
needing any configuration information in the ncbi config file.&nbsp; Operation
behind a firewall, or with a proxy, requires very little in the ncbi config
file, and this is easily created by asking Sequin to configure for network
access.
<br>
<hr WIDTH="100%">
<center><b>Notes from Previous Releases</b>
<br><b><font size=+1>Version 6.0</font></b>
<br><i>the date of release may be obtained from the file <b>ncbi/VERSION</b></i></center>

<hr WIDTH="100%">
<br>This release includes source code for the new (2.0) version of BLAST.
Also included are a small number of incremental changes in the ASN.1 specification.
<p>BLAST 2.0 - BLAST 2.0 can produce gapped alignments and is capable of
position-specific-iterated BLASTp (PSI-BLAST).&nbsp; Compared to the 1.4
release of BLAST, there are also signficant performance enhancements as
well as extensive changes to the text report and the format of the databases.&nbsp;
BLAST 2.0 uses threads for multi-processing, using the NCBI threads library.
Three BLAST programs may be compiled in the demo directory. They are:
<br>&nbsp;
<ul>
<li>
<b>formatdb</b>: formats FASTA files as BLAST databases for BLAST 2.0.</li>

<li>
<b>blastall</b>: perform all five flavors of blast comparison.</li>

<li>
<b>blastn</b> and <b>blastp</b> offer fully gapped alignments.</li>

<li>
<b>blastx</b> and <b>tblastn</b> have 'in-frame' gapped alignments and
use sum&nbsp; statistics to link alignments from different frames.</li>

<li>
<b>tblastx</b> provides only ungapped alignments.</li>

<li>
<b>blastpgp</b>: performs gapped blastp searches and can be used to perform
iterative searches in psi-blast mode.</li>
</ul>
Additional information may be obtained from the README in the BLAST
<br>directory of the FTP site and from the NCBI BLAST pages.
<p><b>ASN.1 Spec Changes for 1997</b>
<p><tt>biblio.asn</tt>
<blockquote><tt>Cit-pat - some fields made optional to allow patent applications
to be legal</tt>
<blockquote><tt>Cit-pat.number OPTIONAL</tt>
<br><tt>Cit-pat.date-issue OPTIONAL</tt></blockquote>
<tt>&nbsp; -- Patent number and date-issue were made optional in 1997 to</tt>
<br><tt>&nbsp; --&nbsp; support patent applications being issued from the
USPTO</tt>
<br><tt>&nbsp; --&nbsp; Semantically a Cit-pat must have either a patent
number or</tt>
<br><tt>&nbsp; --&nbsp; an application number (or both) to be valid</tt>
<br>&nbsp;</blockquote>
<tt>medline.asn</tt>
<blockquote><tt>added ML-field to support other MEDLINE line types</tt></blockquote>

<p><br><tt>Medline-entry ::= SEQUENCE {</tt>
<br><tt>&nbsp; uid INTEGER OPTIONAL ,&nbsp;&nbsp; -- MEDLINE UID, sometimes
not yet available if from PubMed</tt>
<br><tt>&nbsp; em Date ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- Entry Month</tt>
<br><tt>&nbsp; ... (not shown)</tt>
<br><tt>&nbsp; pmid PubMedId OPTIONAL , -- MEDLINE records may include
the PubMedId</tt>
<br><tt>&nbsp; pub-type SET OF VisibleString OPTIONAL,&nbsp; -- may show
publication types (review, etc)</tt>
<br><tt>&nbsp; mlfield SET OF Medline-field OPTIONAL }&nbsp; -- additional
Medline field types</tt>
<p><tt>Medline-field ::= SEQUENCE {</tt>
<br><tt>&nbsp; type INTEGER {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Keyed type</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; other (0) ,&nbsp;&nbsp;&nbsp;&nbsp;
-- look in line code</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; comment (1) ,&nbsp;&nbsp; -- comment
line</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; erratum (2) } , -- retracted, corrected,
etc</tt>
<br><tt>&nbsp; str VisibleString , -- the text</tt>
<br><tt>&nbsp; ids SEQUENCE OF DocRef OPTIONAL }&nbsp; -- pointers relevant
to this text</tt>
<p><tt>DocRef ::= SEQUENCE { -- reference to a document</tt>
<br><tt>&nbsp; type INTEGER {</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; medline (1) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pubmed (2) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ncbigi (3) } ,</tt>
<br><tt>&nbsp; uid INTEGER }</tt>
<br>&nbsp;
<p><tt>seq.asn</tt>
<blockquote><tt>MolInfo.tech - added names for HTG classes already implemented</tt>
<br><tt>Annotdesc.region - added seqloc. If present, all annots in this
SeqAnnot are within this region. Optimization on big seqs.</tt></blockquote>

<p><br><tt>seqfeat.asn</tt>
<blockquote><tt>added OrgMod.specimen-voucher - new organism qualifier</tt>
<br><tt>added OrgMod.old-name - used internally at NCBI</tt>
<br><tt>added BioSource.is-focus - for distinguishing biological focus
of multiple source features.</tt>
<br><tt>added Seq-feat.pseudo so any feature can be flagged explicitly
as belonging to a pseudogene</tt>
<br><tt>added Seq-feat.except-text for an explanation of the exception
when Seq-feat.except is TRUE. Currently this text is in Seq-feat.comment
in backbone records and GBQuals in some other genbank records.</tt>
<br>&nbsp;</blockquote>

<p><br>
<hr WIDTH="100%">
<center><b>Notes from Previous Releases</b>
<br><b><font size=+1>Version 5.0</font></b>
<br>
<hr WIDTH="100%"><b>Summary</b></center>

<p>This release includes a small number of incremental changes in the ASN.1
specification. Most significant is the addition of the PubMedID, a bibliographic
citation identifier similar to a MEDLINE UID. PubMed is a new citation
database being developed at NCBI which is a superset of MEDLINE. It will
be an avenue by which publishers can deposit electronic versions of their
citations and abstracts to allow them timely linking to network entrez
from the publishers on-line services. PubMed will route these citations
to MEDLINE and they will appear in MEDLINE (and Entrez) after the usual
MEDLINE indexing. However, for some period of time, such articles will
have only a PubMedID. We would like to switch Entrez over to supporting
PubMedIDs as early as possible. WE STRONGLY ENCOURAGE DEVELOPERS TO RECOMPILE
AND RELINK WITH THISVERSION OF THE TOOLKIT AS SOON AS POSSIBLE. The changes
in this specification should not cause problems with existing software,
so a simple compile and link should be enough to make you compatible. Details
of ASN.1 specification changes are listed below.
<p>There has been considerable development of the toolkit in other aspects
as well, many of which are embodied in sequin, the new NCBI direct submission
tool, which is included in the toolkit as well. In the interest of getting
the PubMed changes into the specification and developers hands promptly,
we have not included much on that aspect of this toolkit at this time.
<p>
<hr WIDTH="100%">
<center><b>&nbsp; Changes in the 1996 NCBI ASN.1 (version 5.0) specification</b></center>

<hr WIDTH="100%">
<br>Once again, there are very few changes to the NCBI ASN.1 specification
this year. The biggest change is the addition of the PubMed ID to support
the new NCBI PubMed database.&nbsp; There are also small additions to the
medline and organism specifications, detailed below.&nbsp; As usual, these
changes are also backward compatible with old data.&nbsp; However, you
should recompile and relinkyour applications as soon as possible, since
the old applications will not be compatible with the new datatypes.
<p>1) PubMed - NCBI is building a new citation database that is a superset
of MEDLINE and which will be linked to online journals from publishers.
The bibliographic components of the specification have had support for
PubMed IDs added.&nbsp; These include biblio.asn (objbibli.[ch]), pub.asn
(objpub.[ch]), medline.asn (objmedli.[ch]).
<p>2) pub-type - MEDLINE includes strings indicating the type of a publication.
The medline definition has had the attribute pub-type added to support
these strings.
<p>From the 1996 MeSH, here's the list.
<br>&nbsp;
<blockquote><tt>Abstract</tt>
<br><tt>Bibliography</tt>
<br><tt>Classical Article</tt>
<br><tt>Clinical Conference</tt>
<br><tt>Clinical Trial</tt>
<br><tt>Clinical Trial, Phase I</tt>
<br><tt>Clinical Trial, Phase II</tt>
<br><tt>Clinical Trial, Phase III</tt>
<br><tt>Clinical Trial, Phase IV</tt>
<br><tt>Comment</tt>
<br><tt>Consensus Development Conference</tt>
<br><tt>Consensus Development Conference, NIH</tt>
<br><tt>Controlled Clinical Trial</tt>
<br><tt>Corrected and Republished Article</tt>
<br><tt>Current Biog-Obit</tt>
<br><tt>Dictionary</tt>
<br><tt>Directory</tt>
<br><tt>Duplicate Publication</tt>
<br><tt>Editorial</tt>
<br><tt>Festschrift</tt>
<br><tt>Guideline</tt>
<br><tt>Historical Article</tt>
<br><tt>Historical Biography</tt>
<br><tt>Interview</tt>
<br><tt>Journal Article</tt>
<br><tt>Legal Brief</tt>
<br><tt>Letter</tt>
<br><tt>Meeting Report</tt>
<br><tt>Meta-Analysis</tt>
<br><tt>Monograph</tt>
<br><tt>Multicenter Study</tt>
<br><tt>News</tt>
<br><tt>Newspaper Article</tt>
<br><tt>Overall</tt>
<br><tt>Periodical Index</tt>
<br><tt>Practice Guideline</tt>
<br><tt>Published Erratum</tt>
<br><tt>Randomized Controlled Trial</tt>
<br><tt>Retracted Publication</tt>
<br><tt>Retraction of Publication</tt>
<br><tt>Review</tt>
<br><tt>Review Literature</tt>
<br><tt>Review of Reported Cases</tt>
<br><tt>Review, Academic</tt>
<br><tt>Review, Multicase</tt>
<br><tt>Review, Tutorial</tt>
<br><tt>Scientific Integrity Review</tt>
<br><tt>Technical Report</tt>
<br><tt>Twin Study</tt></blockquote>

<p><br>3) virion - the attribute virion has been added to BioSource.genome.
It just complements proviral which was already there.&nbsp; This will map
to a /virion qualifier in the new GenBank feature table definition.
<p>4) division - OrgName.div now (optionally) can contain the GenBank division
code (eg.&nbsp; PRI).
<p>5) signal-peptide, transit-peptide - were added to Prot-ref, to support
annotation of protein features on the protein sequence in a way that could
be mapped to a GenBank feature table.
<p>That's all. Relevant sections of the asn.1 specification are shown below.
<br>
<hr WIDTH="100%">
<br><tt>biblio.asn</tt>
<p><tt>PubMedId ::= INTEGER -- Id from the PubMed database at NCBI</tt>
<p><tt>and..</tt>
<br>&nbsp;
<p><tt>Cit-gen ::= SEQUENCE {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- NOT from ANSI, this is a catchall</tt>
<br><tt>&nbsp; cit VisibleString OPTIONAL , -- anything, not parsable</tt>
<br><tt>&nbsp; authors Auth-list OPTIONAL ,</tt>
<br><tt>&nbsp; muid INTEGER OPTIONAL ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --
medline uid</tt>
<br><tt>&nbsp; journal Title OPTIONAL ,</tt>
<br><tt>&nbsp; volume VisibleString OPTIONAL ,</tt>
<br><tt>&nbsp; issue VisibleString OPTIONAL ,</tt>
<br><tt>&nbsp; pages VisibleString OPTIONAL ,</tt>
<br><tt>&nbsp; date Date OPTIONAL ,</tt>
<br><tt>&nbsp; serial-number INTEGER OPTIONAL ,&nbsp; -- for GenBank style
references</tt>
<br><tt>&nbsp; title VisibleString OPTIONAL ,&nbsp;&nbsp;&nbsp; -- eg.
cit="unpublished",title="title"</tt>
<br><tt>&nbsp; pmid PubMedId OPTIONAL }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- PubMed Id</tt>
<br>&nbsp;<tt></tt>
<p><tt>pub.asn</tt>
<p><tt>Pub ::= CHOICE {</tt>
<br><tt>&nbsp; gen Cit-gen ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- general or generic unparsed</tt>
<br><tt>&nbsp; sub Cit-sub ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- submission</tt>
<br><tt>&nbsp; medline Medline-entry ,</tt>
<br><tt>&nbsp; muid INTEGER ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- medline uid</tt>
<br><tt>&nbsp; article Cit-art ,</tt>
<br><tt>&nbsp; journal Cit-jour ,</tt>
<br><tt>&nbsp; book Cit-book ,</tt>
<br><tt>&nbsp; proc Cit-proc ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- proceedings
of a meeting</tt>
<br><tt>&nbsp; patent Cit-pat ,</tt>
<br><tt>&nbsp; pat-id Id-pat ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- identify
a patent</tt>
<br><tt>&nbsp; man Cit-let ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- manuscript, thesis, or letter</tt>
<br><tt>&nbsp; equiv Pub-equiv,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- to cite
a variety of ways</tt>
<br><tt>&nbsp; pmid PubMedId }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- PubMedId</tt>
<p><tt>medline.asn</tt>
<p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- a MEDLINE or PubMed entry</tt>
<br><tt>Medline-entry ::= SEQUENCE {</tt>
<br><tt>&nbsp; uid INTEGER OPTIONAL ,&nbsp;&nbsp;&nbsp; -- MEDLINE UID,
sometimes not yet available if from PubMed</tt>
<br><tt>&nbsp; em Date ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- Entry Month</tt>
<br><tt>&nbsp; cit Cit-art ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- article citation</tt>
<br><tt>&nbsp; abstract VisibleString OPTIONAL ,</tt>
<br><tt>&nbsp; mesh SET OF Medline-mesh OPTIONAL ,</tt>
<br><tt>&nbsp; substance SET OF Medline-rn OPTIONAL ,</tt>
<br><tt>&nbsp; xref SET OF Medline-si OPTIONAL ,</tt>
<br><tt>&nbsp; idnum SET OF VisibleString OPTIONAL ,&nbsp;&nbsp;&nbsp;
-- ID Number (grants, contracts)</tt>
<br><tt>&nbsp; gene SET OF VisibleString OPTIONAL ,</tt>
<br><tt>&nbsp; pmid PubMedId OPTIONAL ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- MEDLINE records may include the PubMedId</tt>
<br><tt>&nbsp; pub-type SET OF VisibleString OPTIONAL } -- may show publication
types (review, etc)</tt>
<p><tt>seqfeat.asn</tt>
<p><tt>OrgName ::= SEQUENCE {</tt>
<br><tt>&nbsp; name CHOICE {</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; binomial BinomialOrgName ,&nbsp;&nbsp;&nbsp;
-- genus/species type name</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virus VisibleString ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- virus names are different</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hybrid MultiOrgName ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- hybrid between organisms</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; namedhybrid BinomialOrgName , --
some hybrids have genus x species name</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partial PartialOrgName } OPTIONAL
, -- when genus not known</tt>
<br><tt>&nbsp; attrib VisibleString OPTIONAL ,&nbsp;&nbsp; -- attribution
of name</tt>
<br><tt>&nbsp; mod SEQUENCE OF OrgMod OPTIONAL ,</tt>
<br><tt>&nbsp; lineage VisibleString OPTIONAL ,&nbsp; -- lineage with semicolon
separators</tt>
<br><tt>&nbsp; gcode INTEGER OPTIONAL ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- genetic code (see CdRegion)</tt>
<br><tt>&nbsp; mgcode INTEGER OPTIONAL ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- mitochondrial genetic code</tt>
<br><tt>&nbsp; div VisibleString OPTIONAL }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- GenBank division code</tt>
<p><tt>BioSource ::= SEQUENCE {</tt>
<br><tt>&nbsp; genome INTEGER { -- biological context</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unknown (0) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; genomic (1) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; chloroplast (2) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; chromoplast (3) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kinetoplast (4) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mitochondrion (5) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plastid (6) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; macronuclear (7) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extrachrom (8) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plasmid (9) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; transposon (10) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; insertion-seq (11) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cyanelle (12) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proviral (13) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virion (14) } DEFAULT unknown ,</tt>
<br><tt>&nbsp; origin INTEGER {</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unknown (0) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; natural (1) ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- normal biological entity</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; natmut (2) ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- naturally occurring mutant</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mut (3) ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- artificially mutagenized</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; artificial (4) ,&nbsp;&nbsp;&nbsp;
-- artificially engineered</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; synthetic (5) ,&nbsp;&nbsp;&nbsp;&nbsp;
-- purely synthetic</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; other (255) } DEFAULT unknown ,</tt>
<br><tt>&nbsp; org Org-ref ,</tt>
<br><tt>&nbsp; subtype SEQUENCE OF SubSource OPTIONAL }</tt>
<p><tt>Prot-ref ::= SEQUENCE {</tt>
<br><tt>&nbsp; name SET OF VisibleString OPTIONAL ,&nbsp; -- protein name</tt>
<br><tt>&nbsp; desc VisibleString OPTIONAL ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- description (instead of name)</tt>
<br><tt>&nbsp; ec SET OF VisibleString OPTIONAL ,&nbsp;&nbsp;&nbsp; --
E.C. number(s)</tt>
<br><tt>&nbsp; activity SET OF VisibleString OPTIONAL ,&nbsp; -- activities</tt>
<br><tt>&nbsp; db SET OF Dbtag OPTIONAL ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- ids in other dbases</tt>
<br><tt>&nbsp; processed ENUMERATED {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- processing status</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not-set (0) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; preprotein (1) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mature (2) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; signal-peptide (3) ,</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; transit-peptide (4) } DEFAULT not-set
}</tt>
<p>
<hr WIDTH="100%">
<center><b>Notes from Previous Releases</b>
<br><b><font size=+1>New Functions in Version 4.0</font></b></center>

<hr WIDTH="100%">
<br>There are a host of new functions in this release, but as usual we
have not managed to make time to document them all. Large parts of Sequin
are present which will be announced and described more fully in the fall.
However, specific tools of immediate interest are:
<p>blast2 - this is the long awaited BLAST client/server which permits
structured interaction with BLAST over the internet. We have provided a
basic client that produces the traditional blast output. In addition, the
function call interface can be used in more elaborate clients. For more
information contact Tom Madden, <a href="mailto:madden@ncbi.nlm.nih.gov">madden@ncbi.nlm.nih.gov</a>
<p>WARNING!!! blast2 is the client we plan to support on the longer term.
The blast1 client we included for those of you who wanted a head start
will NOT be supported in future. Please shift any blast1 clients to the
(very similar) blast2 interface as soon as possible.
<p>sim, sim2 - protein and DNA sequence alignments in linear space. This
is the function call interface to these valuable tools. Applications have
been written which are available by ftp as are published papers. For more
information contact Jinghui Zhang, <a href="mailto:zjing@ncbi.nlm.nih.gov">zjing@ncbi.nlm.nih.gov</a>
<br>&nbsp;
<br>&nbsp;
<p><b>Changes in ASN.1 spec 4.0 from 3.0</b>
<p>Affil - biblio.asn
<br>added the field "postal-code" for Zip code finally.
<p>Contact-info - submit.asn
<br>added the field "contact" which is type "Author". The contact info
has evolved into a fully structured form, so I just took Author which has
structured names and structured address (Affil). We will eventually phase
out all the less structured ones in Contact-info.
<p>OrgName - sefeat.asn
<br>added "lineage", "gcode", "mgcode" for the lineage, genetic code, and
mitochondrial genetic code. This is part of Org-ref, and consolidates all
the organism info (except original SOURCE line) out of the GenBank block...
and enables us to deliver it nicely from Taxon.
<p>Seq-descr - seq.asn
<br>removed the Seq-descr "neighbors" and replaced it with "dbxref", since
neighbors has never been used. This is used to add cross-references to
the whole entry.
<p>Pubdesc - seq.asn
<br>has an added slot, "reftype" which is an integer and is used to indicate
the GenBank usage of a reference.
<p>0 - seq - applies to the sequence. This is default and they way it is
used now.
<br>1 - sites - applies to (unspecified) features. Equivalent to a GenBank
SITES feature. We could switch to this from using the Imp-feat we do now.
<br>2 - feats - applies to specific features. The idea here is provide
a place for the full citation, so features nead only reference it. If now
features reference it should be removed. This would work for checking content
when only a part of a sequence is copied or pasted. A "sites" ref could
not have this check since we do not know which features it goes to.
<p>Seq-feat - seqfeat.asn
<br>added a slot called "dbxref" to Seq-feat. This is a SET OF Dbtag. It
will be for adding the new db_xref qualifiers to features. We already have
some of these in the xref slots of Gene-ref, Prot-ref, Org-ref. It means
we have to check two places in these cases. I do not want to retire the
slots since these were meant to be used in other contexts besides features..
and Org-ref already is.
<p>added a slot called "anticodon" to the tRNA extension of the RNA feature.
This is a Seq-loc that points to the location of the anticodon in a tRNA.
We have been populating this data in a User-object, and will have to do
a retro to convert it.
<p><b>EXPORTED Genetic-code</b>
<p>Seq-align - seqalign.asn
<br>added "bounds" to Seq-align so you can record the regions over which
an alignment was computed.. not always included in the resulting alignment
itself.
<p>added two new types:
<br>&nbsp; A) Packed-seg -- a denser representation from Colombe and Jinghui
<br>&nbsp; B) disc - discontinuous alignments as a SEQUENCE OF Seq-align
<p>Seq-annot - seq.asn
<p>added a field to Seq-annot, Align-def, to discriminate types of alignment
sets. This has the advantage of minimal changes as well as separating sets
of alignments from conceptually single alignments. I am not sure it is
necessary to distinguish "alt" from "blocks" though. Also it means you
can attach more info, with other Seq-annot fields and/or by expanding the
Align-def. I put in "ids" in Align-def specifically to put the one Seq-id
that is the "master" for type "ref". I made it a SET OF so we could use
it for other collections where we might want to list more than one.
<p>added "ids" and "locs" as allowed types within Seq-annot. This would
enable us to pass lists like this around between tools with all the addtional
descriptive information in Annotdesc. I know this will be useful.
<p>added "general" to Annot-id for tracking 3rd party annotations.
<br>&nbsp;
<br>&nbsp;
<br>
<br>
<br>
<center>
<p><b><font size=+1>INTRODUCTION</font></b></center>

<p>This distribution is release 5.0 of the NCBI core library for building
portable software, and AsnLib, a collection of routines for handling ASN.1
data and developing ASN.1 software applications.&nbsp; AsnLib and the asntool
application are built using the CoreLib routines. In the ./doc directory
is an MS Word file which details the information given below. It is also
available as hardcopy. See the README in ./doc.
<p>The lowest layer of code is the CoreLib.&nbsp; These are multiplatform
functions for memory allocation (including byte stores), string manipulation,
file input and output, error and general messages, and time and date notification.&nbsp;
These functions have been written only where we found that the existing
ANSI functions were not sufficiently multi-platform or wellbehaved among
all of the platforms that we support.&nbsp; For each platform (a combination
of processor, operating system, compiler, and windowing system), we supply
a specific ncbilcl.h file, which contains typedefs and defines for multi-platform
symbols,and includes a number of standard header files.&nbsp; (For example,
ncbilcl.msw is used for the Microsoft C compiler under Microsoft Windows
on the PC.)
<br>Use of these symbols, and of the functions in the CoreLib, allow us
to write multi-platform source code for a variety of disparate platforms.
<p>The next layer of code is the AsnLib stream reader.&nbsp; This is used
in conjunction with a header file and a parse table loader file, both of
which are produced by processing the formal ASN.1 specification with the
AsnTool application. The symbolic defines in the header file are pointers
into the parse table, in which the ASN.1 specification is represented.&nbsp;
To read at the stream reader level, a program alternates between calls
to AsnReadId and AsnReadVal. AsnReadId returns a pointer into the parse
table, which can be compared against the defines in the AsnTool-generated
header.&nbsp; For example, in the specification for MEDLINE records, the
Medline-entry section has an item called "uid", for the unique ID of the
record.&nbsp; This is symbolized in the header file as MEDLINE_ENTRY_uid.&nbsp;
When AsnReadId returns this symbol, the program calls AsnReadVal to obtain
the uid for that record. AsnKillValue is also needed to free any memory
allocated by AsnReadVal, which occurs when the value is a string and not
an integer.&nbsp; The entire set of records on the Entrez CD-ROM can be
read as a single stream with the AsnLib functions.
<p>The ASN.1 records may be accessed at a higher level through the object
loaders, which utilize the stream processing functions to load C memory
structures with the contents of the ASN.1 objects. For each ASN.1 object
we specify, we also define an equivalent C memory structure.&nbsp; The
object loader level of code contains functions to read and write each ASN.1
object.&nbsp; These are hierarchical, as are the ASN.1 specifications.&nbsp;
Calling the top level loader, SeqEntryAsnRead, will load an entire SeqEntry
from an open AsnIo channel, and will return apointer to the loaded memory
structure.&nbsp; The read function for an AsnIo channel can be swapped
to refer to a normal disk file, a network socket, or to compressed data,
which it automatically decompresses.&nbsp; The object loader code can interconvert
between the highly-branched memory object and a linear ASN.1 message with
complete fidelity.&nbsp; The object loaders have additional functions,
including the ability to explore the structure and notify the program when
particular data elements are encountered.&nbsp; The entire contents of
the Entrez CD-ROM can also be streamed through the object loaders.&nbsp;
However, most calls to the object loaders for simply reading a particular
record are done via the data access functions (see below).
<p>The data access functions allow a program to call the object loaders
on a sequence or MEDLINE record given the uid of the record. This will
get the data into memory regardless of whether the data are compressed
on the Entrez CD-ROM or are obtained through a service over the Internet.
This means that a detailed understanding of the files and formats on the
Entrez disc is not needed by application programmers. The function to load
a sequence record, SeqEntryGet, needs the uid to retrieve and a complexity
code parameter. A sequence record is in the form of a NucProt set.&nbsp;
This contains a nucleotide (which may itself be composed of segments) and
all of the proteins it is known to encode. The set of segments is called
a SegSet, and the individual sequences are called BioSeqs.&nbsp; We have
taken the liberty of producing this integrated view, but the complexity
code parameter allows the record to be easily loaded in a simpler, more
traditional form, if desired.&nbsp; The accession number term list is built
to supply the proper uids to support this facility. This access library
is compatible with Entrez release 1.0 or later only.
<p>The sequence utilities and application programmer interface layer allows
exploration of the loaded memory structures and generation of standard
literature or sequence reports from those objects.&nbsp; For example, a
BioSeq can be converted to FASTA or GenBank flat file formats and saved
to a file, and a MEDLINE record can be saved in MEDLARS format, which is
suitable for entry into personal bibliographic database programs.&nbsp;
A sequence port can be opened that gives a simple, linear view of a segmented
sequence, converting alphabets, merging exon segments, and dealing with
information on both strands of the DNA.&nbsp; This layer also includes
some functions to explore the NucProt set.&nbsp; The explore functions
visit each individual BioSeq in the set, calling a callback function for
each sequence node so that a program can examine feature tables and other
information that are associated with the NucProt or SegSets or with the
individual sequences.
<p>Vibrant is a multi-platform user interface development library that
runs on the Macintosh, Microsoft Windows on the PC, or X11 and OSF/Motif
on UNIX and VAX computers [separate documentation].&nbsp; It is used to
build the graphical interface for the Entrez application (whose source
code is in the browser directory). The philosophy behind Vibrant is that
everything in the published user interface guidelines (the generic behavior
of windows, menus, buttons, etc.), as well as positioning and sizing of
graphical control objects, is taken care of automatically. The program
provides callback functions that are notified when the user has manipulated
an object. Vibrant and Entrez code are not supported, but are provided
on an as-is basis.
<p>The advantage of using AsnLib and the object loaders, as they are implemented,
is that application program developers merely need to recompile their programs
with the new (AsnTool-generated) header files and load the new parse tables
(included with the Entrez software) in order to be able to read the new
data.&nbsp; This process is straightforward, and will not break existing
program code.&nbsp; The application is free to ignore new fields if it
does not choose to take advantage of the new kinds of information.
<p>When developing new ASN.1 specifications, as of June 1994 it is possible
to automatically generate the object loaders and header files for those
specifications, using the AsnCode utility.&nbsp; For some complex ASN.1
specifications, however, AsnCode may fail to generate the correct source
code.
<p>The documentation is currently being brought up to date.&nbsp; The programs
in the demo directory are designed to teach the proper use of many of the
functions discussed above.&nbsp; Many of these programs are not yet documented.&nbsp;
The simplest is testcore.c, which tests various functionsin the CoreLib.&nbsp;
The most complex is getfeat.c, which takes an accession number of locus
name, determines the unique seq ID, retrieves the entry from the Entrez
CD-ROM using the data access library, locates all coding region features
using the explore functions, and prints the DNA sequences of all exons
using sequence port functions.&nbsp; If you cannotextract and print the
doc.tar.Z file, please send an email message with your land mailing address
and phone number to <a href="mailto:toolbox@ncbi.nlm.nih.gov">toolbox@ncbi.nlm.nih.gov</a>,
and we will mail a copy to you.
<p>The contents of the ncbi directory (the highest level, containing the
NCBI Software Development Kit source code in several subdirectories) is
shown below.&nbsp; The readme file contains instructions on copying the
appropriate make files to be built in the build directory.&nbsp; The makeallfile
copies headers to the include directory builds four libraries (ncbi, ncbiobj,
ncbicdr and vibrant), copying them to the lib directory. The makedemo file
builds the demo programs and the Entrez application:
<br>&nbsp;
<ul>
<li>
api Application Programmer Interface, Sequence Utilities</li>

<li>
asn ASN.1 specifications for publications and sequences</li>

<li>
asnlib&nbsp; Source code for AsnLib and asntool</li>

<li>
asnload&nbsp; AsnLib headers and dynamic parse tables (Mac and PC)</li>

<li>
asnstat&nbsp; AsnLib headers that use static memory (UNIX and VMS)</li>

<li>
bin Asntool executable copied here</li>

<li>
biostruc&nbsp; Source code for Molecular Modelling DataBase functions</li>

<li>
browser&nbsp; Source code for Entrez application</li>

<li>
build&nbsp; Empty directory for building tools and libraries</li>

<li>
cdromlib&nbsp; Access routines for data on the Entrez CD-ROM</li>

<li>
cn3d&nbsp; Source code for Vibrant-based 3D structure viewer</li>

<li>
config&nbsp; Configuration files for NCBI software:</li>

<ul>
<li>
dos</li>

<li>
mac</li>

<li>
unix</li>

<li>
vms</li>

<li>
win</li>
</ul>

<li>
corelib&nbsp; Source code for NCBI Core Software Library</li>

<li>
data&nbsp; Data files used for sequence conversion</li>

<li>
demo&nbsp; AsnLib and sequence utility demonstration programs</li>

<li>
desktop&nbsp; Source code for Vibrant-based viewers and editors</li>

<li>
doc Documentation in Microsoft Word file</li>

<li>
include&nbsp; Include files required by applications are copied here</li>

<li>
lib Libraries copied here</li>

<li>
link&nbsp; Contains several subdirectories with build accessory files:</li>

<ul>
<li>
macmet Macintosh Metrowerks/CodeWarrior</li>

<li>
macmpw Macintosh MPW C</li>

<li>
msdos Microsoft C and Borland C for DOS</li>

<li>
mswin Microsoft C and Borland C for Windows</li>
</ul>

<li>
make&nbsp; Make files for various systems</li>

<li>
network&nbsp; Network version of data access</li>

<ul>
<li>
apple</li>

<li>
blast2</li>

<li>
encrypt</li>

<li>
entrez</li>

<li>
netmanag</li>

<li>
nsclilib</li>
</ul>

<li>
object&nbsp; Functions for reading and writing complex objects</li>

<li>
sequin&nbsp; Source code for Sequin application</li>

<li>
tools&nbsp; Source code for alignment and other contributed utilities</li>

<li>
readme&nbsp; File that contains important building instructions</li>

<li>
vibrant&nbsp; Source code for Vibrant portable interface package</li>
</ul>

<p><br>The platforms that are supported (as indicated by the suffix on
the relevant ncbilcl.h file) are shown below. Those marked with an asterisk
(*) are available as-is:
<p>370*&nbsp; IBM 370
<br>acc SUN acc compiler
<br>alf DEC Alpha under OSF/1
<br>aov DEC Alpha under AXP/OpenVMS
<br>aux*&nbsp; Macintosh A/UX
<br>bor Borland for DOS
<br>bwn Borland for Microsoft Windows
<br>ccr CenterLine CodeCenter
<br>cpp SUN C++
<br>cra*&nbsp; Cray
<br>cvx*&nbsp; Convex
<br>gcc Gnu gcc (under SunOS, not Solaris)
<br>hp *&nbsp; Hewlett Packard
<br>lna*&nbsp; Linux on DEC Alpha
<br>lnx Linux (Red Hat Linux release 5.2 with kernel 2.0.36)
<br>met Macintosh Metrowerks compiler
<br>mpw Macintosh Programmer's Workshop
<br>msc Microsoft C for DOS
<br>msw Microsoft for Windows
<br>nxt*&nbsp; NeXT
<br>r6k*&nbsp; IBM RS 6000
<br>scr CodeCenter under Sun Solaris
<br>sgi Silicon Graphics
<br>sin Sun Solaris on Intel processors
<br>sol Sun Solaris (for cc and gcc)
<br>thc THINK C on Macintosh
<br>ult DEC ULTRIX
<br>vms DEC VAX/VMS
<p>Questions or comments can be directed to <a href="mailto:toolbox@ncbi.nlm.nih.gov.">toolbox@ncbi.nlm.nih.gov.</a>
<p><b>ANSI C:</b>
<p>&nbsp; This software requires an ANSI C compiler. This will be no problem
at
<br>all except to people on Sun machines, where the bundled C compiler,
cc, is
<br>non-ansi.&nbsp; However, you can use the Sun unbundled compiler, acc,
or the Gnu
<br>compiler, gcc (which is free) and that works just fine.&nbsp; If you
have written
<br>applications on the Sun with non-ANSI functions, the ANSI compilers
will
<br>complain.&nbsp; See the notes below if this is a problem.
<center>
<p><b><font size=+1>INSTALLATION</font></b></center>

<p>To build the NCBI toolkit you need to look for platform-dependent instructions:
<br>For UNIX:
<br>&nbsp; look at the file make/readme.unx
<br>For Mac:
<br>&nbsp; look at the file make/readme.mac
<br>For Microsoft Windows95/98/NT:
<br>&nbsp; look at the file make/readme.dos
<p>There is some information which may be useful for NCBI tookit building
<br>in the file doc/FAQ.txt
<p><b>ALL</b>
<br>&nbsp; change to the directory above the ncbi subdirectory
<p><b>Unix</b>
<br>&nbsp; tested on Sun Sparc (Solaris 2.6, Sunos 4.1.3),
<br>&nbsp; Silicon Graphics IRIX 5.* and 6.*, DEC Alpha with OSF/1 V4.0,
<br>&nbsp; Linux (Red Hat Linux release 5.2 with kernel 2.0.33) on Intel,
<br>&nbsp; Sun Solaris for Intel (Solaris 2.7).
<p>&nbsp; Run the script ncbi/make/makedis.csh keeping it's output in the
<br>&nbsp; separate file:
<br>&nbsp; for sh or bash:
<blockquote><tt>ncbi/make/makedis.csh 2>&amp;1 | tee out.makedis.csh</tt></blockquote>
&nbsp; for csh or tcsh:
<blockquote><tt>ncbi/make/makedis.csh |&amp; tee out.makedis.csh</tt></blockquote>
&nbsp; If that script gives you an error like this:
<blockquote><tt>Your platform is not supported.</tt>
<br><tt>To port ncbi toolkit to your platform consult</tt>
<br><tt>the files platform/*.ncbi.mk</tt></blockquote>
&nbsp; then you should check the script ncbi/make/makedis.csh and
<br>&nbsp; add proper platform-dependent ncbi.mk file in ncbi/platform
<br>&nbsp; directory.
<p>&nbsp; Other UNIX: AIX, ULTRIX, NeXt, Sun acc,
<br>&nbsp; Follows models above.&nbsp; Read header in makeall.unx and makedemo.unx
<br>&nbsp; for details.
<p>&nbsp; for all UNIX, edit .ncbirc as described in section "CONFIGURATION
OR
<br>&nbsp; SETTINGS FILES".
<br>&nbsp; optional edit .login to "setenv NCBI=[path to .ncbirc file]"
<br>&nbsp;
<p><b>MS-DOS</b>
<br>(Also see NEW MAKEFILES, below)
<br><u>Microsoft C version 7.00</u>
<blockquote><tt>copy ..\make\*.dos</tt>
<br><tt>ren makeall.dos makefile</tt>
<br><tt>nmake MSC=1 [note: nmake requires windows or DPMI]</tt>
<br><tt>copy ..\config\ncbi.dos ncbi.cfg</tt></blockquote>
check paths in ncbi.cfg file [see section on CONFIGURATION]
<p>Optional:
<br>edit AUTOEXEC.BAT with "set NCBI=[path to directory containing ncbi.cfg]".
<br>reboot to activate
<p>&nbsp; To make demo programs:
<blockquote><tt>nmake -f makedemo.dos MSC=1</tt></blockquote>
<u>Microsoft Windows version 7.00</u>
<blockquote><tt>copy ..\make\*.dos</tt>
<br><tt>ren makeall.dos makefile</tt>
<br><tt>nmake MSW=1 [note: nmake requires windows or DPMI]</tt></blockquote>
&nbsp; check paths in "ncbi.ini" as above
<br>&nbsp; copy ncbi.ini to your windows directory
<br>&nbsp; To make demos:
<blockquote><tt>nmake -f makedemo.dos MSW=1</tt></blockquote>
<u>Borland C++ 3.1</u>
<blockquote><tt>copy ..\make\*.dos</tt>
<br><tt>ren makeall.dos makefile</tt>
<br><tt>make -DBOR</tt></blockquote>
then set paths as in Microsoft C, above.
<p>To make demos:
<blockquote><tt>make -f makedemo.dos -DBOR</tt></blockquote>

<p><br><u>Borland C++ 3.1 for Windows</u>
<blockquote><tt>copy ..\make\*.dos</tt>
<br><tt>ren makeall.dos makefile</tt>
<br><tt>make -DBWN</tt></blockquote>
then set paths as in Microsoft Windows, above.
<br>To make demos:
<blockquote><tt>make -f makedemo.dos -DBWN</tt></blockquote>

<p><br><b>Mac</b><b></b>
<p>tested on <u>CodeWarrior IDE 2.1, MacOS 8.0</u>
<p><u>All</u>
<blockquote>copy <b>config:mac:ncbi.cnf </b>to your System Folder, or to
the <b>System Folder:Preferences</b> subfolder
<br>edit the "<b>ASNLOAD</b>" line in <i>"ncbi.cnf" </i>to point to the
<b>ncbi:asnload</b> directory in this release
<br>edit the "<b>DATA</b>" line to point to the <b>ncbi/data </b>directory
<br>&nbsp;</blockquote>
<u>CodeWarrior</u>
<blockquote>raise Preferred Size of Script Editor from 700 to 3000, and
raise Preferred Size of CodeWarrior IDE 2.1 by 2000 (e.g., from 8206 to
10206), using Get Info from the Finder.
<br>to compile for MC680x0 platform (default is PowerPC), change property
MASTER from "PPC" to "68K".
<br>run copyhdrs.met
<br>run makeall.met
<br>run makenet.met
<br>run makedemo.met</blockquote>
<u>Think C</u> - no longer supported
<br><u>MPW C</u> -&nbsp; no longer supported
<br>&nbsp;
<p><b>VMS</b>
<p><u>Changes to VMS make file naming conventions:</u>
<p>&nbsp; The old .dcl prefix (last character is a lower case L) was changed
<br>to .dc1 (last character is the numeral 1) to allow for different make
files
<br>for DecWindows 1.1 and DecWindows 1.2.&nbsp; Several new .dc2 files
were
<br>contributed by David Mathog of CalTech.&nbsp; A synopsis of his additional
<br>instructions:
<p>&nbsp; VAX C&nbsp; DecWindows 1.1 Use .dcl1 files.
<br>&nbsp; DEC C&nbsp; DecWindows 1.1 Use .dcl1 files, but change cc to
cc/standard=vaxc
<br>&nbsp; VAX C&nbsp; DecWindows 1.2 This combination has not been tested.
<br>&nbsp; DEC C&nbsp; DecWindows 1.2 Use .dcl2 files.
<p><u>VMS (without Vibrant) on VAX</u>
<br><tt>&nbsp; $set def [ncbi.build]</tt>
<br><tt>&nbsp; $copy [-.make]*.dc1 *.com</tt>
<br><tt>&nbsp; $@makeall</tt><tt></tt>
<p>&nbsp; check ncbi.cfg as described in section "CONFIGURATION OR SETTINGS
FILES".
<br>&nbsp; edit LOGIN.COM to "define NCBI [path to ncbi.cfg file]"
<p>&nbsp; To make demos:
<br><tt>&nbsp; $@makedemo</tt>
<p><u>VMS (with Vibrant) on VAX</u>
<br><tt>&nbsp; $set def [ncbi.build]</tt>
<br><tt>&nbsp; $copy [-.make]*.dc1 *.com</tt>
<br><tt>&nbsp; $@viball</tt>
<p>&nbsp; check ncbi.cfg as described in section "CONFIGURATION OR SETTINGS
FILES".
<br>&nbsp; edit LOGIN.COM to "define NCBI [path to ncbi.cfg file]"
<p>&nbsp; To make demos:
<br><tt>&nbsp; $@vibdemo</tt>
<p><b>Testing</b>
<p><u>VMS</u> only:&nbsp; look in rundemo.dc1 in [make] to see how to give
command line arguments. Not all demo programs are shown. Run at least testcore.
<p><u>All</u> else:
<br>In <b>build</b> directory should be a program called <b>testcore</b>.
Type "<tt>testcore -</tt>" and it should show you some default arguments.&nbsp;
Type "<b>testcore</b>" and it will run through a variety of functions in
CoreLib, prompting you for responses along the way.&nbsp; It should run
without a crash or error report. If you made Vibrant versions all demos
will have startup dialog boxes.&nbsp; If not, they take command line arguments.
<p>If testcore runs, read the documentation for CoreLib and for AsnLib.
In the AsnLib documentation are instructions for running asntool itself.
for running a few of the demo programs.&nbsp; There are a large number
of demo programs now (including Entrez itself, if you made the Vibrant
versions).
<br>&nbsp;
<br>&nbsp;
<br>
<br>
<center>
<p><b><font size=+1>CONFIGURATION OR SETTINGS FILES</font></b></center>

<p>One of the fundamental problems in writing portable software concerns
configuration issues.&nbsp; Each individual user's computer will have its
own particular hardware and software environment, and each machine will
have its disk file&nbsp; hierarchy set up in a unique manner.&nbsp; A program
that needs accessory information, such as help files, parse tables, or&nbsp;
format converters, must be given a means of finding the data regardless
of where the user has placed the files.&nbsp; The difficulty is compounded
by the different conventions for naming files and specifying paths on each
class of machine. For example, the name of a CD-ROM on the Macintosh is
fixed, determined by information on the CD itself, whereas on the PC it
is addressed by a drive letter, which can be assigned by the user, but
which cannot be reconciled with the name the Macintosh sees.
<p>An associated problem is that many programs will want to allow the user
to make persistent changes to parameters.&nbsp; These parameters typically
involve numbers or font specifications, but may also include paths to data
files. Some platforms supply such configuration information in preferences
files, others in environment variables.&nbsp; Manipulating these settings
is platform dependent, as is the format in which the preference is specified.
<p>The NCBI Software Toolkit core library addresses these problems by providing
configuration or settings files.&nbsp; These are modeled after the .INI
files used by Microsoft Windows.&nbsp; Settings files are plain ASCII text
files that may be edited by the user or modified by the program.&nbsp;
They are dividedinto sections, each of which is headed by the section name
enclosed in square brackets.&nbsp; Below each section heading is a series
of key=value strings, somewhat analogous to the environment variables that
are used on many platforms.
<p>The ncbi configuration file supplies general purpose configuration information
on paths for commonly used data files.&nbsp; The typical file set up for
the Entrez application running on the PC under Microsoft Windows is shown
below:
<br>&nbsp;
<blockquote><tt>[NCBI]</tt>
<br><tt>ROOT=D:</tt>
<br><tt>ASNLOAD=C:\ENTREZ\ASNLOAD\</tt>
<br><tt>DATA=C:\ENTREZ\DATA</tt>
<br>&nbsp;</blockquote>
The only section is entitled NCBI.&nbsp; The ROOT entry refers to the path
to the Entrez CD-ROM.&nbsp; In this example, the user has configured the
machine to use drive letter D.&nbsp; (On the Macintosh, the name of the
disc is SEQDATA, which cannot be changed by the user.)&nbsp; The ASNLOAD
specifies the path to the ASN.1 parse tables.&nbsp; These files are required
by the AsnLib functions, and all higher-level procedures that call them,&nbsp;
including the Object Loader, Sequence Utility, and Data Access functions.&nbsp;
Files pointed to by the DATA entry contain information necessary to convert
biomolecule sequence data into different alphabets (e.g., unpacking the
2-bit nucleotide code stored on the Entrez CD into standard IUPAC letters).
<p>Although the contents of a configuration file is similar regardless
of platform, the name of the file and its location is platform dependent.
If the base name of the configuration file is xxx, then the actual file
name is shown below for each platform:
<br>&nbsp;
<table BORDER COLS=2 WIDTH="30%" NOSAVE >
<tr>
<td>Macintosh</td>

<td>xxx.cnf</td>
</tr>

<tr>
<td>Microsoft Windows</td>

<td>xxx.INI</td>
</tr>

<tr>
<td>MS-DOS (without Windows)&nbsp;</td>

<td>xxx.CFG</td>
</tr>

<tr>
<td>UNIX</td>

<td>.xxxrc</td>
</tr>

<tr>
<td>VMS</td>

<td>xxx.cfg</td>
</tr>
</table>

<p>&nbsp;
<br>Samples of such files are in subdirectories of \config.&nbsp; The UNIX
version does not have the leading '.' in filename so you can see it. Since
VMS and DOS both use the same file name (ncbi.cfg) the DOS version was
called ncbi.dos. You will have to rename it. Remember these are just models.
You will have to set the paths appropriately for your machine yourself.
<p>The location in which these files must reside is also platform dependent,
and the functions that manipulate the contents may look in several places
to find these files.
<p>On the Macintosh, the function first looks in the System Folder, then in the
Preferences folder within the System Folder.  (See the Mac OS X addendum in the
next paragraph).  Under Microsoft Windows, the file must be in the Windows
directory, along with all of the other .INI files.  Under DOS without Windows,
the function first looks in the current working directory, then in the directory
whose path is specified in the NCBI environment variable. Under UNIX and VMS,
the current working directory is first checked, then the user's home directory,
and finally the directory specified by the NCBI environment variable.  (Under
UNIX, when it uses the environment variable, it will check for configuration
files first without and then with the initial dot.)  On the multi- user
platforms (UNIX and VMS), the use of the NCBI environment variable allows a
common settings file to be used  as the default by multiple users.  If such a
settings file is  changed under program control, it is copied over into the
user's home directory, and the new copy is modified.  The  order of searching
for settings files ensures that this new copy is used in all subsequent
operations.
<p>On Mac OS X, it first looks for xxx.cnf in username/Library/Preferences,
then in package/Contents/Resources, where username is the user's home directory
and package is the application package.  If it does not find the configuration
file, it then switches to UNIX style, looking for .xxxrc in the home directory
and then in the current directory.  This way Mac OS X applications retain the
traditional Mac behavior but can also UNIX style configuration files.
<p>contents of <b>ASNLOAD</b> are in <b>ncbi/asnload</b>
<br>contents of <b>DATA </b>are in <b>ncbi/data</b>
<p>Automatic Generation of code to read and write new ASN.1 messages.
<br>(Previously, <b>ASNCODE USAGE</b>)
<p>'asntool' can now generate code for use as ASN.1 readers and writers.
<br>This functionality used to be in the program called 'asncode'. There
<br>is thus no longer any need for the *.l* files.&nbsp; An example of
how
<br>to generate this code follows:
<br>&nbsp;
<blockquote><tt>asntool -m YOURSPEC.asn -G -B genYOURSPEC</tt></blockquote>

<p><br>Both genYOURSPEC.h and genYOURSPEC.c will be generated.
<p>Within asn ASN.1 definitions, types can be EXPORTed and IMPORTed.
<br>If YOURSPEC.asn imports definitions from otherspec.asn then it has
<br>to be added to the -m parameter as below.&nbsp; Note that code is only
<br>generated for the first file.
<br>&nbsp;
<blockquote><tt>asntool -m YOURSPEC.asn<u>,</u>otherspec.asn -G -B genYOURSPEC</tt>
<br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
^</tt></blockquote>

<p><br>Notice the lack of a blank at the caret (^), above.&nbsp; This is
important.
<br>&nbsp;
<p><br>
<center>
<p><b><font size=+1>MAJOR CHANGES FROM DOCUMENTATION</font></b></center>

<p>AsnNode structures have proved to be generally useful and moved from
AsnLib to ncbimisc.&nbsp; In addition, some elements of structs used in
the object loaders were called "class" to match the ASN.1 names.&nbsp;
Class is a C++ reserved word, so all instances of "class" have been changed
to "_class".
<p>To conform to our naming conventions, we have changed the names appropriately:
<p><tt>AsnValue = DataVal</tt>
<br><tt>AsnNode = ValNode</tt>
<br><tt>class = _class</tt>
<p>A global search and replace of your code with these strings (not restricted
to words... we want to change AsnNodePtr = ValNodePtr as well) should fix
any problems.&nbsp; Field names within structures have not been changed.
If your code uses only the object loaders, you may not find these strings
in your code at all.
<center>
<p><b><font size=+1>DATA ACCESS LIBRARIES</font></b></center>

<p>cdromlib contains data access routines compatible with release 1.0-6.0
of the Entrez CDROM.&nbsp; The documentation for these functions are out
of date.&nbsp; The routines in cdromlib have been split into entrez, sequence,
and medline access functions.&nbsp; The interface you should normally program
to is defined in accentr.[ch].&nbsp; The form of this calls has been changed
to make them compatible with the NCBI network server, a client/server version
of data access.&nbsp; A program written to use these calls can access the
the cdrom data, the network data, a combination, or that plus a local database
by just fiddling with defines.&nbsp; The form of the api for these functions
has also been changed to hide the details of storage and caching more so
that the different optimizations done to support cdrom and network access
are transparent to the application programmer.&nbsp; The end user tool
called "Entrez" now uses these libraries as it's only means of data access
(i.e., you can write an application of your own with any or all of Entrez's
functionality using just these routines).
<br>&nbsp;
<p><br>
<center>
<p><b><font size=+1>NETWORK LIBRARIES</font></b></center>

<p>The toolbox now includes NCBI "Network Services".&nbsp; This includes
everything which you need to build your own "Network Entrez" client software.
The network libraries include a generic network services library (nsclilib),
which is used to contact the network services dispatcher and connect to a
desired server.&nbsp; Note that some development platforms require that you
obtain a few source modules from external vendors.&nbsp; Look at the README
files contained in the network directory (network/*/README) for more details.
<br>&nbsp; <p><br> <center> <p><b><font
size=+1>DOCUMENTATION</font></b></center>

<p>We are rewriting the documentation to conform with all the new features
contained in this software.&nbsp; We will add it to the package as soon
as possible.
<br>&nbsp;
<p><br>
<center>
<p><b><font size=+1>DEMO PROGRAMS</font></b></center>

<p>As in the tools, there are a number of undocumented programs in the
demo directory as well, that use a number of the utility functions in api.
There is also a demo program called "getseq" in the cdromlib directory
which retrieves a sequence from the cdrom given any valid sequence id.
These will be described in more detail in the next set of documentation.
<p>Briefly:
<p>asn2ff.c&nbsp; converts ASN.1 to GenBank flatfile
<br>asn2rpt.c&nbsp; converts ASN.1 to human readable report
<br>dosimple.c&nbsp; converts ASN.1 to a "simple sequence"
<br>getseq.c&nbsp; gets sequence from Entrez Cdrom using data access library,
writes to disk
<br>getfeat.c&nbsp; ditto, but writes sequence of any CdRegion features
to "test.out"
<br>getmesh.c&nbsp; documented
<br>getpub.c&nbsp; documented
<br>indexpub.c&nbsp; documented
<br>seqtest.c&nbsp; reads ASN.1 sequence, converts to iupac, reports segmented
sequences, outputs fasta format to seqtest.out
<br>testcore.c&nbsp; documented
<br>testobj.c&nbsp; tests Medline object loader, demonstrates error checking
using NULL asnio stream.
<br>entrez&nbsp; If Vibrant is installed, the full Entrez program is made.
<br>asndhuff Demonstrates streaming ASN.1 data from the huffman compressed
Entrez CDROM (only works on release 1.0 or later).
<br>entrcmd&nbsp; Standalone non-interactive tool for accessing Entrez
data.
<br>Entrcmd is the search engine used for NCBI's Entrez WWW server.
<br>asncode&nbsp; Tool for generating object loader source code given a
.l file which is the output of AsnTool.
<br>cdscan&nbsp; scans entrez cdrom, makes GenBank, GenPept, or FASTA format
output. Also has a slot for a replaceable CustomRoutine supplied by you.
Has two examples of such routines.
<center>
<p><b><font size=+1>CALLBACK CONVENTIONS</font></b></center>

<p>The CoreLib, AsnLib, and Object Loader routines have been converted
to use the LIBCALL and LIBCALLBACK symbols (FAR PASCAL) on the PC for Windows.
This will allow us to build dynamic link libraries (DLLs) so that the code
can be accessed from languages other than C.&nbsp; Callback functions you
write that are of types AsnOptFreeFunc, AsnExpOptFunc, IoFuncType, AsnReadFunc,
AsnWriteFunc, and SeqEntryFunc, should be declared using the LIBCALLBACK
macro. For example, a callback used as an AsnOptFreeFunc should be declared
as follows:
<br>&nbsp;
<blockquote><tt>static Pointer LIBCALLBACK MyOptFreeFunc (Pointer);</tt></blockquote>

<p><br>The SeqEntryFunc callback used by SeqEntryExplore has not yet been
modified to use the LIBCALLBACK type.&nbsp; This will be added in the near
future.
<br>
</body>
</html>
